// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PokemonCardCollection.Persistence;

#nullable disable

namespace PokemonCardCollection.Persistence.Migrations
{
    [DbContext(typeof(PokemonCardCollectionDbContext))]
    partial class PokemonCardCollectionDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CardAttackPokemonCard", b =>
                {
                    b.Property<Guid>("CardAttackId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PokemonCardId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CardAttackId", "PokemonCardId");

                    b.HasIndex("PokemonCardId");

                    b.ToTable("PokemonCardAttacks", (string)null);
                });

            modelBuilder.Entity("PokemonCardCollection.Domain.Entities.CardAbility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CardAbilities");
                });

            modelBuilder.Entity("PokemonCardCollection.Domain.Entities.CardAttack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Power")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CardAttacks");
                });

            modelBuilder.Entity("PokemonCardCollection.Domain.Entities.Expansion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<int>("CardsAmount")
                        .HasColumnType("int");

                    b.Property<string>("DisplayFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Expansions");
                });

            modelBuilder.Entity("PokemonCardCollection.Domain.Entities.Illustrator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Illustrators");
                });

            modelBuilder.Entity("PokemonCardCollection.Domain.Entities.PokemonCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AbilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CardType")
                        .HasColumnType("int");

                    b.Property<string>("DisplayFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnergyType")
                        .HasColumnType("int");

                    b.Property<Guid>("ExpansionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HealthPoints")
                        .HasColumnType("int");

                    b.Property<Guid>("IllustratorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("PokemonDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Rarity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AbilityId");

                    b.HasIndex("ExpansionId");

                    b.HasIndex("IllustratorId");

                    b.ToTable("PokemonCards");
                });

            modelBuilder.Entity("PokemonCardCollection.Domain.Entities.TrainerCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CardType")
                        .HasColumnType("int");

                    b.Property<string>("DisplayFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EffectDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("ExpansionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IllustratorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("Rarity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExpansionId");

                    b.HasIndex("IllustratorId");

                    b.ToTable("TrainerCards");
                });

            modelBuilder.Entity("CardAttackPokemonCard", b =>
                {
                    b.HasOne("PokemonCardCollection.Domain.Entities.CardAttack", null)
                        .WithMany()
                        .HasForeignKey("CardAttackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonCardCollection.Domain.Entities.PokemonCard", null)
                        .WithMany()
                        .HasForeignKey("PokemonCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PokemonCardCollection.Domain.Entities.PokemonCard", b =>
                {
                    b.HasOne("PokemonCardCollection.Domain.Entities.CardAbility", "Ability")
                        .WithMany("PokemonCards")
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokemonCardCollection.Domain.Entities.Expansion", "Expansion")
                        .WithMany("PokemonCards")
                        .HasForeignKey("ExpansionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonCardCollection.Domain.Entities.Illustrator", "Illustrator")
                        .WithMany("PokemonCards")
                        .HasForeignKey("IllustratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ability");

                    b.Navigation("Expansion");

                    b.Navigation("Illustrator");
                });

            modelBuilder.Entity("PokemonCardCollection.Domain.Entities.TrainerCard", b =>
                {
                    b.HasOne("PokemonCardCollection.Domain.Entities.Expansion", "Expansion")
                        .WithMany("TrainerCards")
                        .HasForeignKey("ExpansionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonCardCollection.Domain.Entities.Illustrator", "Illustrator")
                        .WithMany("TrainerCards")
                        .HasForeignKey("IllustratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expansion");

                    b.Navigation("Illustrator");
                });

            modelBuilder.Entity("PokemonCardCollection.Domain.Entities.CardAbility", b =>
                {
                    b.Navigation("PokemonCards");
                });

            modelBuilder.Entity("PokemonCardCollection.Domain.Entities.Expansion", b =>
                {
                    b.Navigation("PokemonCards");

                    b.Navigation("TrainerCards");
                });

            modelBuilder.Entity("PokemonCardCollection.Domain.Entities.Illustrator", b =>
                {
                    b.Navigation("PokemonCards");

                    b.Navigation("TrainerCards");
                });
#pragma warning restore 612, 618
        }
    }
}
